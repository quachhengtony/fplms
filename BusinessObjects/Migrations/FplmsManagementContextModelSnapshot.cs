// <auto-generated />
using System;
using BusinessObjects.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObjects.Migrations
{
    [DbContext(typeof(FplmsManagementContext))]
    partial class FplmsManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BusinessObjects.Models.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Accepted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Removed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RemovedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("StudentId");

                    b.ToTable("answer");
                });

            modelBuilder.Entity("BusinessObjects.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("CycleDuration")
                        .HasColumnType("int")
                        .HasColumnName("cycle_duration");

                    b.Property<string>("EnrollKey")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("enroll_key");

                    b.Property<sbyte?>("IsDisable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("is_disable")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("LecturerId")
                        .HasColumnType("int")
                        .HasColumnName("LECTURER_id");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("SemesterCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SEMESTER_code");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("SUBJECT_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "LecturerId" }, "fk_CLASS_LECTURER1_idx");

                    b.HasIndex(new[] { "SubjectId" }, "fk_CLASS_SUBJECT1_idx");

                    b.HasIndex(new[] { "SemesterCode" }, "fk_class_SEMESTER1_idx");

                    b.ToTable("class", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.CycleReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<int>("CycleNumber")
                        .HasColumnType("int")
                        .HasColumnName("cycle_number");

                    b.Property<string>("Feedback")
                        .HasColumnType("text")
                        .HasColumnName("feedback");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GROUP_id");

                    b.Property<float?>("Mark")
                        .HasColumnType("float")
                        .HasColumnName("mark");

                    b.Property<string>("ResourceLink")
                        .HasColumnType("text")
                        .HasColumnName("resource_link");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GroupId" }, "fk_PROGRESS_REPORT_copy1_GROUP1_idx");

                    b.ToTable("cycle_report", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("CLASS_id");

                    b.Property<DateTime?>("EnrollTime")
                        .HasColumnType("timestamp")
                        .HasColumnName("enroll_time");

                    b.Property<sbyte?>("IsDisable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("is_disable")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("MemberQuantity")
                        .HasColumnType("int")
                        .HasColumnName("member_quantity");

                    b.Property<int?>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("PROJECT_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ClassId" }, "fk_GROUP_CLASS1_idx");

                    b.HasIndex(new[] { "ProjectId" }, "fk_GROUP_PROJECT1_idx");

                    b.ToTable("group", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Lecturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<sbyte>("IsDisable")
                        .HasColumnType("tinyint")
                        .HasColumnName("is_disable");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "email_UNIQUE")
                        .IsUnique();

                    b.ToTable("lecturer", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Feedback")
                        .HasColumnType("text")
                        .HasColumnName("feedback");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GROUP_id");

                    b.Property<int>("LecturerId")
                        .HasColumnType("int")
                        .HasColumnName("LECTURER_id");

                    b.Property<string>("Link")
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<DateTime?>("ScheduleTime")
                        .HasColumnType("timestamp")
                        .HasColumnName("schedule_time");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GroupId" }, "fk_MEETING_GROUP1_idx");

                    b.HasIndex(new[] { "LecturerId" }, "fk_MEETING_LECTURER1_idx");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique();

                    b.ToTable("meeting", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.ProgressReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GROUP_id");

                    b.Property<DateTime>("ReportTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("report_time")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("STUDENT_id");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GroupId" }, "fk_PROGRESS_REPORT_GROUP1_idx");

                    b.HasIndex(new[] { "StudentId" }, "fk_PROGRESS_REPORT_STUDENT_idx");

                    b.ToTable("progress_report", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Actors")
                        .HasColumnType("text")
                        .HasColumnName("actors");

                    b.Property<string>("Context")
                        .HasColumnType("text")
                        .HasColumnName("context");

                    b.Property<sbyte>("IsDisable")
                        .HasColumnType("tinyint")
                        .HasColumnName("is_disable");

                    b.Property<int>("LecturerId")
                        .HasColumnType("int")
                        .HasColumnName("LECTURER_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Problem")
                        .HasColumnType("text")
                        .HasColumnName("problem");

                    b.Property<string>("Requirements")
                        .HasColumnType("text")
                        .HasColumnName("requirements");

                    b.Property<string>("SemesterCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SEMESTER_code");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("SUBJECT_id");

                    b.Property<string>("Theme")
                        .HasColumnType("text")
                        .HasColumnName("theme");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SubjectId" }, "fk_PROJECT_SUBJECT1_idx");

                    b.HasIndex(new[] { "LecturerId" }, "fk_project_lecturer1_idx");

                    b.HasIndex(new[] { "SemesterCode" }, "fk_project_semester1_idx");

                    b.ToTable("project", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(20000)
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Removed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RemovedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("Solved")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("question");
                });

            modelBuilder.Entity("BusinessObjects.Models.Semester", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("Code")
                        .HasName("PRIMARY");

                    b.ToTable("semester", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("code");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<sbyte>("IsDisable")
                        .HasColumnType("tinyint")
                        .HasColumnName("is_disable");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "email_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("email_UNIQUE1");

                    b.ToTable("student", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.StudentAnswerUpvote", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("char(36)");

                    b.HasKey("StudentId", "AnswerId");

                    b.HasIndex("AnswerId");

                    b.ToTable("student_answer_upvote");
                });

            modelBuilder.Entity("BusinessObjects.Models.StudentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("CLASS_id");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GROUP_id");

                    b.Property<sbyte?>("IsLeader")
                        .HasColumnType("tinyint")
                        .HasColumnName("is_leader");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("STUDENT_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ClassId" }, "fk_STUDENT_GROUP_CLASS1_idx");

                    b.HasIndex(new[] { "GroupId" }, "fk_STUDENT_has_GROUP_GROUP1_idx");

                    b.HasIndex(new[] { "StudentId" }, "fk_STUDENT_has_GROUP_STUDENT1_idx");

                    b.ToTable("student_group", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.StudentUpvote", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("char(36)");

                    b.HasKey("StudentId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("student_upvote");
                });

            modelBuilder.Entity("BusinessObjects.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<sbyte?>("IsDisable")
                        .HasColumnType("tinyint")
                        .HasColumnName("is_disable");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("subject", (string)null);
                });

            modelBuilder.Entity("StudentClass", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("STUDENT_id");

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("CLASS_id");

                    b.HasKey("StudentId", "ClassId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ClassId" }, "fk_STUDENT_has_CLASS_CLASS1_idx");

                    b.HasIndex(new[] { "StudentId" }, "fk_STUDENT_has_CLASS_STUDENT1_idx");

                    b.ToTable("student_class", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Answer", b =>
                {
                    b.HasOne("BusinessObjects.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Student", "Student")
                        .WithMany("Answers")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BusinessObjects.Models.Class", b =>
                {
                    b.HasOne("BusinessObjects.Models.Lecturer", "Lecturer")
                        .WithMany("Classes")
                        .HasForeignKey("LecturerId")
                        .IsRequired()
                        .HasConstraintName("fk_CLASS_LECTURER1");

                    b.HasOne("BusinessObjects.Models.Semester", "SemesterCodeNavigation")
                        .WithMany("Classes")
                        .HasForeignKey("SemesterCode")
                        .IsRequired()
                        .HasConstraintName("fk_class_SEMESTER1");

                    b.HasOne("BusinessObjects.Models.Subject", "Subject")
                        .WithMany("Classes")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("fk_CLASS_SUBJECT1");

                    b.Navigation("Lecturer");

                    b.Navigation("SemesterCodeNavigation");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BusinessObjects.Models.CycleReport", b =>
                {
                    b.HasOne("BusinessObjects.Models.Group", "Group")
                        .WithMany("CycleReports")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("fk_PROGRESS_REPORT_copy1_GROUP1");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("BusinessObjects.Models.Group", b =>
                {
                    b.HasOne("BusinessObjects.Models.Class", "Class")
                        .WithMany("Groups")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("fk_GROUP_CLASS1");

                    b.HasOne("BusinessObjects.Models.Project", "Project")
                        .WithMany("Groups")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_GROUP_PROJECT1");

                    b.Navigation("Class");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("BusinessObjects.Models.Meeting", b =>
                {
                    b.HasOne("BusinessObjects.Models.Group", "Group")
                        .WithMany("Meetings")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("fk_MEETING_GROUP1");

                    b.HasOne("BusinessObjects.Models.Lecturer", "Lecturer")
                        .WithMany("Meetings")
                        .HasForeignKey("LecturerId")
                        .IsRequired()
                        .HasConstraintName("fk_MEETING_LECTURER1");

                    b.Navigation("Group");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("BusinessObjects.Models.ProgressReport", b =>
                {
                    b.HasOne("BusinessObjects.Models.Group", "Group")
                        .WithMany("ProgressReports")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("fk_PROGRESS_REPORT_GROUP1");

                    b.HasOne("BusinessObjects.Models.Student", "Student")
                        .WithMany("ProgressReports")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("fk_PROGRESS_REPORT_STUDENT");

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BusinessObjects.Models.Project", b =>
                {
                    b.HasOne("BusinessObjects.Models.Lecturer", "Lecturer")
                        .WithMany("Projects")
                        .HasForeignKey("LecturerId")
                        .IsRequired()
                        .HasConstraintName("fk_project_lecturer1");

                    b.HasOne("BusinessObjects.Models.Semester", "SemesterCodeNavigation")
                        .WithMany("Projects")
                        .HasForeignKey("SemesterCode")
                        .IsRequired()
                        .HasConstraintName("fk_project_semester1");

                    b.HasOne("BusinessObjects.Models.Subject", "Subject")
                        .WithMany("Projects")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_PROJECT_SUBJECT1");

                    b.Navigation("Lecturer");

                    b.Navigation("SemesterCodeNavigation");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BusinessObjects.Models.Question", b =>
                {
                    b.HasOne("BusinessObjects.Models.Student", "Student")
                        .WithMany("Questions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BusinessObjects.Models.StudentAnswerUpvote", b =>
                {
                    b.HasOne("BusinessObjects.Models.Answer", "Answer")
                        .WithMany("Upvoters")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Student", "Student")
                        .WithMany("UpvotedAnswers")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BusinessObjects.Models.StudentGroup", b =>
                {
                    b.HasOne("BusinessObjects.Models.Class", "Class")
                        .WithMany("StudentGroups")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("fk_STUDENT_GROUP_CLASS1");

                    b.HasOne("BusinessObjects.Models.Group", "Group")
                        .WithMany("StudentGroups")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("fk_STUDENT_has_GROUP_GROUP1");

                    b.HasOne("BusinessObjects.Models.Student", "Student")
                        .WithMany("StudentGroups")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("fk_STUDENT_has_GROUP_STUDENT1");

                    b.Navigation("Class");

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BusinessObjects.Models.StudentUpvote", b =>
                {
                    b.HasOne("BusinessObjects.Models.Question", "Question")
                        .WithMany("Upvoters")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Student", "Student")
                        .WithMany("UpvotedQuestions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentClass", b =>
                {
                    b.HasOne("BusinessObjects.Models.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("fk_STUDENT_has_CLASS_CLASS1");

                    b.HasOne("BusinessObjects.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("fk_STUDENT_has_CLASS_STUDENT1");
                });

            modelBuilder.Entity("BusinessObjects.Models.Answer", b =>
                {
                    b.Navigation("Upvoters");
                });

            modelBuilder.Entity("BusinessObjects.Models.Class", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("StudentGroups");
                });

            modelBuilder.Entity("BusinessObjects.Models.Group", b =>
                {
                    b.Navigation("CycleReports");

                    b.Navigation("Meetings");

                    b.Navigation("ProgressReports");

                    b.Navigation("StudentGroups");
                });

            modelBuilder.Entity("BusinessObjects.Models.Lecturer", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Meetings");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("BusinessObjects.Models.Project", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("BusinessObjects.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Upvoters");
                });

            modelBuilder.Entity("BusinessObjects.Models.Semester", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("BusinessObjects.Models.Student", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("ProgressReports");

                    b.Navigation("Questions");

                    b.Navigation("StudentGroups");

                    b.Navigation("UpvotedAnswers");

                    b.Navigation("UpvotedQuestions");
                });

            modelBuilder.Entity("BusinessObjects.Models.Subject", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
